sizeof_1_ = 8;
aggr _1_
{
	'U' 0 lo;
	'U' 4 hi;
};

defn
_1_(addr) {
	complex _1_ addr;
	print("	lo	", addr.lo, "\n");
	print("	hi	", addr.hi, "\n");
};

sizeofFPdbleword = 8;
aggr FPdbleword
{
	'F' 0 x;
	{
	'U' 0 lo;
	'U' 4 hi;
	};
};

defn
FPdbleword(addr) {
	complex FPdbleword addr;
	print("	x	", addr.x, "\n");
	print("_1_ {\n");
		_1_(addr+0);
	print("}\n");
};

UTFmax = 3;
Runesync = 128;
Runeself = 128;
Runeerror = 65533;
sizeofFmt = 48;
aggr Fmt
{
	'b' 0 runes;
	'X' 4 start;
	'X' 8 to;
	'X' 12 stop;
	'X' 16 flush;
	'X' 20 farg;
	'D' 24 nfmt;
	'X' 28 args;
	'D' 32 r;
	'D' 36 width;
	'D' 40 prec;
	'U' 44 flags;
};

defn
Fmt(addr) {
	complex Fmt addr;
	print("	runes	", addr.runes, "\n");
	print("	start	", addr.start\X, "\n");
	print("	to	", addr.to\X, "\n");
	print("	stop	", addr.stop\X, "\n");
	print("	flush	", addr.flush\X, "\n");
	print("	farg	", addr.farg\X, "\n");
	print("	nfmt	", addr.nfmt, "\n");
	print("	args	", addr.args\X, "\n");
	print("	r	", addr.r, "\n");
	print("	width	", addr.width, "\n");
	print("	prec	", addr.prec, "\n");
	print("	flags	", addr.flags, "\n");
};

FmtWidth = 1;
FmtLeft = 2;
FmtPrec = 4;
FmtSharp = 8;
FmtSpace = 16;
FmtSign = 32;
FmtZero = 64;
FmtUnsigned = 128;
FmtShort = 256;
FmtLong = 512;
FmtVLong = 1024;
FmtComma = 2048;
FmtByte = 4096;
FmtFlag = 8192;
sizeofTm = 40;
aggr Tm
{
	'D' 0 sec;
	'D' 4 min;
	'D' 8 hour;
	'D' 12 mday;
	'D' 16 mon;
	'D' 20 year;
	'D' 24 wday;
	'D' 28 yday;
	'a' 32 zone;
	'D' 36 tzoff;
};

defn
Tm(addr) {
	complex Tm addr;
	print("	sec	", addr.sec, "\n");
	print("	min	", addr.min, "\n");
	print("	hour	", addr.hour, "\n");
	print("	mday	", addr.mday, "\n");
	print("	mon	", addr.mon, "\n");
	print("	year	", addr.year, "\n");
	print("	wday	", addr.wday, "\n");
	print("	yday	", addr.yday, "\n");
	print("	zone	", addr.zone, "\n");
	print("	tzoff	", addr.tzoff, "\n");
};

PNPROC = 1;
PNGROUP = 2;
Profoff = 0;
Profuser = 1;
Profkernel = 2;
Proftime = 3;
Profsample = 4;
sizeofLock = 4;
aggr Lock
{
	'D' 0 val;
};

defn
Lock(addr) {
	complex Lock addr;
	print("	val	", addr.val, "\n");
};

sizeofQLp = 12;
aggr QLp
{
	'D' 0 inuse;
	'A' QLp 4 next;
	'C' 8 state;
};

defn
QLp(addr) {
	complex QLp addr;
	print("	inuse	", addr.inuse, "\n");
	print("	next	", addr.next\X, "\n");
	print("	state	", addr.state, "\n");
};

sizeofQLock = 16;
aggr QLock
{
	Lock 0 lock;
	'D' 4 locked;
	'A' QLp 8 $head;
	'A' QLp 12 $tail;
};

defn
QLock(addr) {
	complex QLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	locked	", addr.locked, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

sizeofRWLock = 20;
aggr RWLock
{
	Lock 0 lock;
	'D' 4 readers;
	'D' 8 writer;
	'A' QLp 12 $head;
	'A' QLp 16 $tail;
};

defn
RWLock(addr) {
	complex RWLock addr;
	print("Lock lock {\n");
	Lock(addr.lock);
	print("}\n");
	print("	readers	", addr.readers, "\n");
	print("	writer	", addr.writer, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

sizeofRendez = 12;
aggr Rendez
{
	'A' QLock 0 l;
	'A' QLp 4 $head;
	'A' QLp 8 $tail;
};

defn
Rendez(addr) {
	complex Rendez addr;
	print("	l	", addr.l\X, "\n");
	print("	$head	", addr.$head\X, "\n");
	print("	$tail	", addr.$tail\X, "\n");
};

sizeofNetConnInfo = 36;
aggr NetConnInfo
{
	'X' 0 dir;
	'X' 4 root;
	'X' 8 spec;
	'X' 12 lsys;
	'X' 16 lserv;
	'X' 20 rsys;
	'X' 24 rserv;
	'X' 28 laddr;
	'X' 32 raddr;
};

defn
NetConnInfo(addr) {
	complex NetConnInfo addr;
	print("	dir	", addr.dir\X, "\n");
	print("	root	", addr.root\X, "\n");
	print("	spec	", addr.spec\X, "\n");
	print("	lsys	", addr.lsys\X, "\n");
	print("	lserv	", addr.lserv\X, "\n");
	print("	rsys	", addr.rsys\X, "\n");
	print("	rserv	", addr.rserv\X, "\n");
	print("	laddr	", addr.laddr\X, "\n");
	print("	raddr	", addr.raddr\X, "\n");
};

RFNAMEG = 1;
RFENVG = 2;
RFFDG = 4;
RFNOTEG = 8;
RFPROC = 16;
RFMEM = 32;
RFNOWAIT = 64;
RFCNAMEG = 1024;
RFCENVG = 2048;
RFCFDG = 4096;
RFREND = 8192;
RFNOMNT = 16384;
sizeofQid = 16;
aggr Qid
{
	'W' 0 path;
	'U' 8 vers;
	'b' 12 type;
};

defn
Qid(addr) {
	complex Qid addr;
	print("	path	", addr.path, "\n");
	print("	vers	", addr.vers, "\n");
	print("	type	", addr.type, "\n");
};

sizeofDir = 60;
aggr Dir
{
	'u' 0 type;
	'U' 4 dev;
	Qid 8 qid;
	'U' 24 mode;
	'U' 28 atime;
	'U' 32 mtime;
	'V' 36 length;
	'X' 44 name;
	'X' 48 uid;
	'X' 52 gid;
	'X' 56 muid;
};

defn
Dir(addr) {
	complex Dir addr;
	print("	type	", addr.type, "\n");
	print("	dev	", addr.dev, "\n");
	print("Qid qid {\n");
	Qid(addr.qid);
	print("}\n");
	print("	mode	", addr.mode, "\n");
	print("	atime	", addr.atime, "\n");
	print("	mtime	", addr.mtime, "\n");
	print("	length	", addr.length, "\n");
	print("	name	", addr.name\X, "\n");
	print("	uid	", addr.uid\X, "\n");
	print("	gid	", addr.gid\X, "\n");
	print("	muid	", addr.muid\X, "\n");
};

sizeofWaitmsg = 20;
aggr Waitmsg
{
	'D' 0 pid;
	'a' 4 time;
	'X' 16 msg;
};

defn
Waitmsg(addr) {
	complex Waitmsg addr;
	print("	pid	", addr.pid, "\n");
	print("	time	", addr.time, "\n");
	print("	msg	", addr.msg\X, "\n");
};

sizeofIOchunk = 8;
aggr IOchunk
{
	'X' 0 addr;
	'U' 4 len;
};

defn
IOchunk(addr) {
	complex IOchunk addr;
	print("	addr	", addr.addr\X, "\n");
	print("	len	", addr.len, "\n");
};

VtScoreSize = 20;
VtMaxLumpSize = 57344;
VtPointerDepth = 7;
VtEntrySize = 40;
VtRootSize = 300;
VtMaxStringSize = 1000;
VtAuthSize = 1024;
MaxFragSize = 9216;
VtMaxFileSize = 281474976710655;
VtRootVersion = 2;
VtCryptoStrengthNone = 0;
VtCryptoStrengthAuth = 1;
VtCryptoStrengthWeak = 2;
VtCryptoStrengthStrong = 3;
VtCryptoNone = 0;
VtCryptoSSL3 = 1;
VtCryptoTLS1 = 2;
VtCryptoMax = 3;
VtCodecNone = 0;
VtCodecDeflate = 1;
VtCodecThwack = 2;
VtCodecMax = 3;
VtErrType = 0;
VtRootType = 1;
VtDirType = 2;
VtPointerType0 = 3;
VtPointerType1 = 4;
VtPointerType2 = 5;
VtPointerType3 = 6;
VtPointerType4 = 7;
VtPointerType5 = 8;
VtPointerType6 = 9;
VtPointerType7 = 10;
VtPointerType8 = 11;
VtPointerType9 = 12;
VtDataType = 13;
VtMaxType = 14;
VtEntryActive = 1;
VtEntryDir = 2;
VtEntryDepthShift = 2;
VtEntryDepthMask = 28;
VtEntryLocal = 32;
VtEntryNoArchive = 64;
sizeofVtRoot = 300;
aggr VtRoot
{
	'u' 0 version;
	'a' 2 name;
	'a' 130 type;
	'a' 258 score;
	'u' 278 blockSize;
	'a' 280 prev;
};

defn
VtRoot(addr) {
	complex VtRoot addr;
	print("	version	", addr.version, "\n");
	print("	name	", addr.name, "\n");
	print("	type	", addr.type, "\n");
	print("	score	", addr.score, "\n");
	print("	blockSize	", addr.blockSize, "\n");
	print("	prev	", addr.prev, "\n");
};

sizeofVtEntry = 40;
aggr VtEntry
{
	'U' 0 gen;
	'u' 4 psize;
	'u' 6 dsize;
	'b' 8 depth;
	'b' 9 flags;
	'W' 12 size;
	'a' 20 score;
};

defn
VtEntry(addr) {
	complex VtEntry addr;
	print("	gen	", addr.gen, "\n");
	print("	psize	", addr.psize, "\n");
	print("	dsize	", addr.dsize, "\n");
	print("	depth	", addr.depth, "\n");
	print("	flags	", addr.flags, "\n");
	print("	size	", addr.size, "\n");
	print("	score	", addr.score, "\n");
};

sizeofVtServerVtbl = 16;
aggr VtServerVtbl
{
	'X' 0 read;
	'X' 4 write;
	'X' 8 closing;
	'X' 12 sync;
};

defn
VtServerVtbl(addr) {
	complex VtServerVtbl addr;
	print("	read	", addr.read\X, "\n");
	print("	write	", addr.write\X, "\n");
	print("	closing	", addr.closing\X, "\n");
	print("	sync	", addr.sync\X, "\n");
};

VtVersion01 = 1;
VtVersion02 = 2;
QueuingW = 0;
QueuingR = 1;
sizeofThread = 20;
aggr Thread
{
	'D' 0 pid;
	'D' 4 ref;
	'X' 8 error;
	'D' 12 state;
	'A' Thread 16 next;
};

defn
Thread(addr) {
	complex Thread addr;
	print("	pid	", addr.pid, "\n");
	print("	ref	", addr.ref, "\n");
	print("	error	", addr.error\X, "\n");
	print("	state	", addr.state, "\n");
	print("	next	", addr.next\X, "\n");
};

sizeofVtLock = 20;
aggr VtLock
{
	Lock 0 lk;
	'A' Thread 4 writer;
	'D' 8 readers;
	'A' Thread 12 qfirst;
	'A' Thread 16 qlast;
};

defn
VtLock(addr) {
	complex VtLock addr;
	print("Lock lk {\n");
	Lock(addr.lk);
	print("}\n");
	print("	writer	", addr.writer\X, "\n");
	print("	readers	", addr.readers, "\n");
	print("	qfirst	", addr.qfirst\X, "\n");
	print("	qlast	", addr.qlast\X, "\n");
};

sizeofVtRendez = 12;
aggr VtRendez
{
	'A' VtLock 0 lk;
	'A' Thread 4 wfirst;
	'A' Thread 8 wlast;
};

defn
VtRendez(addr) {
	complex VtRendez addr;
	print("	lk	", addr.lk\X, "\n");
	print("	wfirst	", addr.wfirst\X, "\n");
	print("	wlast	", addr.wlast\X, "\n");
};

ERROR = 0;
complex Thread vtRock;
complex Thread vtAttach:p;
complex Lock lk$4;
complex Thread vtDetach:p;
complex Thread vtSetError:p;
complex Lock lk$12;
complex VtLock vtLockFree:p;
complex VtLock vtRendezAlloc:p;
complex VtRendez vtRendezAlloc:q;
complex VtRendez vtRendezFree:q;
complex VtLock vtCanLock:p;
complex Thread vtCanLock:t;
complex VtLock vtLock:p;
complex Thread vtLock:t;
complex VtLock vtCanRLock:p;
complex VtLock vtRLock:p;
complex Thread vtRLock:t;
complex VtLock vtUnlock:p;
complex Thread vtUnlock:t;
complex Thread vtUnlock:tt;
complex VtLock vtRUnlock:p;
complex Thread vtRUnlock:t;
complex VtRendez vtSleep:q;
complex Thread vtSleep:s;
complex Thread vtSleep:t;
complex Thread vtSleep:tt;
complex VtLock vtSleep:p;
complex VtRendez vtWakeup:q;
complex Thread vtWakeup:t;
complex VtLock vtWakeup:p;
complex VtRendez vtWakeupAll:q;
complex Thread threadSleep:t;
complex Thread threadWakeup:t;
