# we get most of our source files from ../vt4
x=`{ if (! unmount . >[2]/dev/null) ; bind -c . .; bind -a ../vt4 . }

CONF=vt5cpu
CONFLIST=vt5cpu

loadaddr=0x80100020
physaddr=0x00100020
pagesize=0x100000

objtype=power
</$objtype/mkfile
p=9

DEVS=`{rc ../port/mkdevlist $CONF}

PORT=\
	alarm.$O\
	alloc.$O\
	allocb.$O\
	auth.$O\
	cache.$O\
	chan.$O\
	dev.$O\
	devtab.$O\
	edf.$O\
	fault.$O\
	latin1.$O\
	rebootcmd.$O\
	page.$O\
	parse.$O\
	pgrp.$O\
	portclock.$O\
	print.$O\
	proc.$O\
	qio.$O\
	qlock.$O\
	segment.$O\
	swap.$O\
	sysfile.$O\
	sysproc.$O\
	taslock.$O\
	tod.$O\
	xalloc.$O\

OBJ=\
	l.$O\
	tlb.$O\
	clock.$O\
	dcr.$O\
	fpi.$O\
	fpimem.$O\
	fpipower.$O\
	intr.$O\
	main.$O\
	mmu.$O\
	ppcmul64fract.$O\
	fakeqtm.$O\
	random.$O\
	trap.$O\
	$CONF.root.$O\
	$CONF.rootc.$O\
	$DEVS\
	$PORT\

LIB=\
	/$objtype/lib/libmemlayer.a\
	/$objtype/lib/libmemdraw.a\
	/$objtype/lib/libdraw.a\
	/$objtype/lib/libip.a\
	/$objtype/lib/libsec.a\
	/$objtype/lib/libmp.a\
	/$objtype/lib/libc.a\

9:V:	$p$CONF $p$CONF.elf

<../boot/bootmkfile
<../port/portmkfile
<|../port/mkbootrules $CONF

CFLAGS=-. -I. -I../port -I../ip -I../boot $CFLAGS
AFLAGS=-. -I. -I../port -I../ip -I../boot $AFLAGS

$p$CONF:DQ:	$CONF.c $OBJ $LIB
	$CC $CFLAGS '-DKERNDATE='`{date -n} $CONF.c
	echo '# linking normal kernel'
	$LD -a -R$pagesize -T$loadaddr -o $target -l $OBJ $CONF.$O $LIB >$target.list
	size $target

$p$CONF.elf:DQ:	$CONF.$O $OBJ $LIB
	echo '# linking elf kernel'
	$LD -H5 -R$pagesize -T$loadaddr -P$physaddr -o $target -l $OBJ $CONF.$O $LIB

$p$CONF.gz:D:	$p$CONF
	gzip -9 <$p$CONF >$target

$OBJ: $HFILES

install:V: /$objtype/$p$CONF

/$objtype/$p$CONF:D: $p$CONF $p$CONF.elf
	cp -x $p$CONF $p$CONF.elf /$objtype
	{ 9fs lookout && cp -x $p$CONF $p$CONF.elf /n/lookout/$objtype } &
	{ 9fs piestand && cp -x $p$CONF $p$CONF.elf /n/piestand/$objtype } &
	{ 9fs slocum && cp -x $p$CONF.list /n/slocum/home/rae/hbsr/ml510_ddr2 } &
	wait
	touch $target

archvt5.$O:	io.h reboot.h
devboot.$O:	../port/error.h
devether.$O:	../port/error.h ../port/netif.h etherif.h
etherlltemac.$O:	 ../port/netif.h etherif.h io.h
fpi.$O:		fpi.h
fpimem.$O:	fpi.h
fpipower.$O:	/$objtype/include/ureg.h fpi.h
fpu.$O:		/$objtype/include/ureg.h
main.$O:	/sys/include/pool.h /sys/include/tos.h init.h reboot.h
syscall.$O:	../port/error.h
syscall.$O:	/sys/include/tos.h /$objtype/include/ureg.h
trap.$O:	/sys/include/tos.h /$objtype/include/ureg.h io.h
uartlite.$O:	../port/error.h io.h
random.$O:	../port/error.h

%.$O: ../boot/%.c			# don't use kernel CFLAGS
	$CC -FTVw ../boot/$stem.c

init.out:D:	init9.$O initcode.$O /$objtype/lib/libc.a
	$LD -l -R8 -s -o $target init9.$O initcode.$O -lc

init.h:		init.out
	{echo 'uchar initcode[]={'
	 xd -1x $prereq |
		sed -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} >$target

reboot.out:D:	rebootcode.$O
	# -lc is only for memmove.  -T arg is REBOOTADDR
	$LD -l -a -s -T0x80002640 -R4 -o $target rebootcode.$O -lc >reboot.list

reboot.h:D:	reboot.out
	{echo 'uchar rebootcode[]={'
	 xd -1x $prereq |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} >$target

$CONF.clean:
	if (! unmount . >[2]/dev/null)
		;
	rm -rf $p$CONF $p$CONF.elf $CONF.c boot$CONF.c ../boot/libboot.a$O reboot.h
